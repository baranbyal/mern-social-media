{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      }); // todo socket\n\n      socket.emit(\"createComment\", newPost); // todo notification\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply ? newComment.content : post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref5 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token); // todo notification\n\n        const msg = {\n          id: item._id,\n          text: item.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n          recipients: item.reply ? [item.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"sources":["C:/Users/baran/Documents/baris/mern-social-media/client/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\r\nimport { POST_TYPES } from \"./postAction\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\n\r\n\r\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, comments: [...post.comments, newComment]};\r\n    \r\n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      // todo socket\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"commented on your post.\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: newComment.reply\r\n          ? newComment.content\r\n          : post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n    }\r\n};\r\n\r\n\r\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\r\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\r\n  const newPost = {...post, comments: newComments};\r\n  \r\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n  try {\r\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n\r\n  } catch (err) {\r\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n  }\r\n};\r\n\r\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\r\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\r\n     const newComments = EditData(post.comments, comment._id, newComment);\r\n     const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\r\n\r\n    }\r\n};\r\n\r\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\r\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\r\n  const newComments = EditData(post.comments, comment._id, newComment);\r\n  const newPost = { ...post, comments: newComments };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  try {\r\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\r\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\r\n\r\n  const newPost = {\r\n    ...post,\r\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\r\n  }\r\n\r\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\r\n\r\n  socket.emit('deleteComment', newPost);\r\n\r\n  try {\r\n    deleteArr.forEach(item => {\r\n      deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: item._id,\r\n        text: item.reply\r\n          ? \"mentioned you in a comment.\"\r\n          : \"commented on your post.\",\r\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,UAAhC,QAAkD,eAAlD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,aAApC,QAAyD,uBAAzD;AAKA,OAAO,MAAMC,aAAa,GAAG;EAAA,IAAC;IAACC,IAAD;IAAOC,UAAP;IAAmBC,IAAnB;IAAyBC;EAAzB,CAAD;EAAA,OAAsC,MAAOC,QAAP,IAAoB;IACnF,MAAMC,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE,CAAC,GAAGN,IAAI,CAACM,QAAT,EAAmBL,UAAnB;IAApB,CAAhB;IAEAG,QAAQ,CAAC;MAACG,IAAI,EAAEd,UAAU,CAACe,WAAlB;MAA+BC,OAAO,EAAEJ;IAAxC,CAAD,CAAR;;IAEA,IAAI;MACF,MAAMK,IAAI,GAAG,EACX,GAAGT,UADQ;QAEXU,MAAM,EAAEX,IAAI,CAACY,GAFF;QAGXC,UAAU,EAAEb,IAAI,CAACc,IAAL,CAAUF;MAHX,CAAb;MAKA,MAAMG,GAAG,GAAG,MAAMnB,WAAW,CAAC,SAAD,EAAYc,IAAZ,EAAkBR,IAAI,CAACc,KAAvB,CAA7B;MAEA,MAAMC,OAAO,GAAG,EAAE,GAAGF,GAAG,CAACL,IAAJ,CAAST,UAAd;QAA0Ba,IAAI,EAAEZ,IAAI,CAACY;MAArC,CAAhB;MACA,MAAMT,OAAO,GAAG,EAAE,GAAGL,IAAL;QAAWM,QAAQ,EAAE,CAAC,GAAGN,IAAI,CAACM,QAAT,EAAmBW,OAAnB;MAArB,CAAhB;MACAb,QAAQ,CAAC;QAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;QAAgCC,OAAO,EAAEJ;MAAzC,CAAD,CAAR,CAVE,CAYF;;MACAF,MAAM,CAACe,IAAP,CAAY,eAAZ,EAA6Bb,OAA7B,EAbE,CAeF;;MACA,MAAMc,GAAG,GAAG;QACVC,EAAE,EAAEL,GAAG,CAACL,IAAJ,CAAST,UAAT,CAAoBW,GADd;QAEVS,IAAI,EAAEpB,UAAU,CAACqB,KAAX,GACF,6BADE,GAEF,yBAJM;QAKVC,UAAU,EAAEtB,UAAU,CAACqB,KAAX,GAAmB,CAACrB,UAAU,CAACuB,GAAX,CAAeZ,GAAhB,CAAnB,GAA0C,CAACZ,IAAI,CAACc,IAAL,CAAUF,GAAX,CAL5C;QAMVa,GAAG,EAAG,SAAQzB,IAAI,CAACY,GAAI,EANb;QAOVc,OAAO,EAAEzB,UAAU,CAACqB,KAAX,GACLrB,UAAU,CAACyB,OADN,GAEL1B,IAAI,CAAC0B,OATC;QAUVC,KAAK,EAAE3B,IAAI,CAAC4B,MAAL,CAAY,CAAZ,EAAeH;MAVZ,CAAZ;MAaArB,QAAQ,CAACV,YAAY,CAAC;QAAEyB,GAAF;QAAOjB,IAAP;QAAaC;MAAb,CAAD,CAAb,CAAR;IACD,CA9BD,CA8BE,OAAO0B,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAACG,IAAI,EAAEjB,WAAW,CAACwC,KAAnB;QAA0BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAAnC,CAAD,CAAR;IACH;EACJ,CAtC4B;AAAA,CAAtB;AAyCP,OAAO,MAAMc,aAAa,GAAG;EAAA,IAAC;IAACC,OAAD;IAAUlC,IAAV;IAAgB0B,OAAhB;IAAyBxB;EAAzB,CAAD;EAAA,OAAoC,MAAOE,QAAP,IAAoB;IACnF,MAAM+B,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6B,EAAC,GAAGsB,OAAJ;MAAaR;IAAb,CAA7B,CAA5B;IACA,MAAMrB,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE6B;IAApB,CAAhB;IAEA/B,QAAQ,CAAC;MAACG,IAAI,EAAEd,UAAU,CAACe,WAAlB;MAA+BC,OAAO,EAAEJ;IAAxC,CAAD,CAAR;;IAEA,IAAI;MACF,MAAMR,YAAY,CAAE,WAAUqC,OAAO,CAACtB,GAAI,EAAxB,EAA2B;QAAEc;MAAF,CAA3B,EAAwCxB,IAAI,CAACc,KAA7C,CAAlB;IAED,CAHD,CAGE,OAAOa,GAAP,EAAY;MACZzB,QAAQ,CAAC;QAACG,IAAI,EAAEjB,WAAW,CAACwC,KAAnB;QAA0BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAAnC,CAAD,CAAR;IACD;EACF,CAZ4B;AAAA,CAAtB;AAcP,OAAO,MAAMiB,WAAW,GAAE;EAAA,IAAC;IAACF,OAAD;IAAUlC,IAAV;IAAgBE;EAAhB,CAAD;EAAA,OAA2B,MAAOE,QAAP,IAAoB;IACrE,MAAMH,UAAU,GAAG,EAAC,GAAGiC,OAAJ;MAAaG,KAAK,EAAE,CAAC,GAAGH,OAAO,CAACG,KAAZ,EAAmBnC,IAAI,CAACY,IAAxB;IAApB,CAAnB;IACC,MAAMqB,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6BX,UAA7B,CAA5B;IACA,MAAMI,OAAO,GAAG,EAAE,GAAGL,IAAL;MAAWM,QAAQ,EAAE6B;IAArB,CAAhB;IAED/B,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IACA,IAAI;MACA,MAAMR,YAAY,CAAE,WAAUqC,OAAO,CAACtB,GAAI,OAAxB,EAAgC,IAAhC,EAAsCV,IAAI,CAACc,KAA3C,CAAlB;IACH,CAFD,CAEE,OAAOa,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAACG,IAAI,EAAEjB,WAAW,CAACwC,KAAnB;QAA0BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAAnC,CAAD,CAAR;IAEH;EACJ,CAZyB;AAAA,CAAnB;AAcP,OAAO,MAAMmB,aAAa,GAAG;EAAA,IAAC;IAAEJ,OAAF;IAAWlC,IAAX;IAAiBE;EAAjB,CAAD;EAAA,OAA6B,MAAOE,QAAP,IAAoB;IAC5E,MAAMH,UAAU,GAAG,EAAE,GAAGiC,OAAL;MAAcG,KAAK,EAAE7C,UAAU,CAAC0C,OAAO,CAACG,KAAT,EAAgBnC,IAAI,CAACY,IAAL,CAAUF,GAA1B;IAA/B,CAAnB;IACA,MAAMuB,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6BX,UAA7B,CAA5B;IACA,MAAMI,OAAO,GAAG,EAAE,GAAGL,IAAL;MAAWM,QAAQ,EAAE6B;IAArB,CAAhB;IAEA/B,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IACA,IAAI;MACF,MAAMR,YAAY,CAAE,WAAUqC,OAAO,CAACtB,GAAI,SAAxB,EAAkC,IAAlC,EAAwCV,IAAI,CAACc,KAA7C,CAAlB;IAED,CAHD,CAGE,OAAOa,GAAP,EAAY;MACZzB,QAAQ,CAAC;QACPG,IAAI,EAAEjB,WAAW,CAACwC,KADX;QAEPrB,OAAO,EAAE;UAAEsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA3B;MAFF,CAAD,CAAR;IAID;EACF,CAf4B;AAAA,CAAtB;AAkBP,OAAO,MAAMoB,aAAa,GAAG;EAAA,IAAC;IAAEvC,IAAF;IAAQkC,OAAR;IAAiBhC,IAAjB;IAAuBC;EAAvB,CAAD;EAAA,OAAqC,MAAOC,QAAP,IAAoB;IACpF,MAAMoC,SAAS,GAAG,CAAC,GAAGxC,IAAI,CAACM,QAAL,CAAcmC,MAAd,CAAqBC,EAAE,IAAIA,EAAE,CAACpB,KAAH,KAAaY,OAAO,CAACtB,GAAhD,CAAJ,EAA0DsB,OAA1D,CAAlB;IAEA,MAAM7B,OAAO,GAAG,EACd,GAAGL,IADW;MAEdM,QAAQ,EAAEN,IAAI,CAACM,QAAL,CAAcmC,MAAd,CAAqBC,EAAE,IAAI,CAACF,SAAS,CAACG,IAAV,CAAeC,EAAE,IAAIF,EAAE,CAAC9B,GAAH,KAAWgC,EAAE,CAAChC,GAAnC,CAA5B;IAFI,CAAhB;IAKAR,QAAQ,CAAC;MAACG,IAAI,EAAEd,UAAU,CAACe,WAAlB;MAA+BC,OAAO,EAAEJ;IAAxC,CAAD,CAAR;IAEAF,MAAM,CAACe,IAAP,CAAY,eAAZ,EAA6Bb,OAA7B;;IAEA,IAAI;MACFmC,SAAS,CAACK,OAAV,CAAkBC,IAAI,IAAI;QACxBhD,aAAa,CAAE,WAAUgD,IAAI,CAAClC,GAAI,EAArB,EAAwBV,IAAI,CAACc,KAA7B,CAAb,CADwB,CAGxB;;QACA,MAAMG,GAAG,GAAG;UACVC,EAAE,EAAE0B,IAAI,CAAClC,GADC;UAEVS,IAAI,EAAEyB,IAAI,CAACxB,KAAL,GACF,6BADE,GAEF,yBAJM;UAKVC,UAAU,EAAEuB,IAAI,CAACxB,KAAL,GAAa,CAACwB,IAAI,CAACtB,GAAL,CAASZ,GAAV,CAAb,GAA8B,CAACZ,IAAI,CAACc,IAAL,CAAUF,GAAX,CALhC;UAMVa,GAAG,EAAG,SAAQzB,IAAI,CAACY,GAAI;QANb,CAAZ;QASAR,QAAQ,CAACT,YAAY,CAAC;UAAEwB,GAAF;UAAOjB,IAAP;UAAaC;QAAb,CAAD,CAAb,CAAR;MACD,CAdD;IAeD,CAhBD,CAgBE,OAAO0B,GAAP,EAAY;MACZzB,QAAQ,CAAC;QACPG,IAAI,EAAEjB,WAAW,CAACwC,KADX;QAEPrB,OAAO,EAAE;UAAEsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA3B;MAFF,CAAD,CAAR;IAID;EACF,CAlC4B;AAAA,CAAtB"},"metadata":{},"sourceType":"module"}