{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const MESSAGE_TYPES = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\n  GET_MESSAGES: \"GET_MESSAGES\"\n};\nexport const addUser = _ref => {\n  let {\n    user,\n    message\n  } = _ref;\n  return async dispatch => {\n    if (message.users.every(item => item._id !== user._id)) {\n      dispatch({\n        type: MESSAGE_TYPES.ADD_USER,\n        payload: { ...user,\n          text: '',\n          media: []\n        }\n      });\n    }\n  };\n};\nexport const addMessage = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    socket.emit('addMessage', msg);\n\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref3 => {\n  let {\n    auth,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESSAGE_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      dispatch({\n        type: MESSAGE_TYPES.GET_MESSAGES,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","getDataAPI","MESSAGE_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","addUser","user","message","dispatch","users","every","item","_id","type","payload","text","media","addMessage","msg","auth","socket","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","recipients","cv","push","result","getMessages","id"],"sources":["C:/Users/baran/Documents/baris/mern-social-media/client/src/redux/actions/messageAction.js"],"sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\nexport const MESSAGE_TYPES = {\r\n  ADD_USER: \"ADD_USER\",\r\n  ADD_MESSAGE: \"ADD_MESSAGE\",\r\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\r\n  GET_MESSAGES: \"GET_MESSAGES\",\r\n};\r\n\r\nexport const addUser = ({ user, message }) => async (dispatch) => {\r\n    if(message.users.every(item => item._id !== user._id)){\r\n        dispatch({type: MESSAGE_TYPES.ADD_USER, payload: {...user, text: '', media: []} });\r\n    }\r\n};\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n\r\n  dispatch({type: MESSAGE_TYPES.ADD_MESSAGE, payload: msg});\r\n  socket.emit('addMessage', msg);\r\n\r\n  try {\r\n    await postDataAPI('message', msg, auth.token)\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1 }) => async (dispatch) => {\r\ntry {\r\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\r\n    let newArr = [];\r\n    res.data.conversations.forEach(item => {\r\n      item.recipients.forEach(cv => {\r\n        if(cv._id !== auth.user._id){\r\n          newArr.push({...cv, text: item.text, media: item.media});\r\n        }\r\n      })\r\n    });\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const getMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n  try {\r\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_MESSAGES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}